name: Continuous Deployment indy-vdr-proxy-server

on:
  push:
    branches: [main]

  workflow_dispatch:

env:
  DH_USERNAME: ${{ secrets.DOCKER_HUB_LOGIN }}
  DH_TOKEN: ${{ secrets.DOCKER_HUB_PWD }}
  IMAGE_NAME: "indy-vdr-proxy-server"

jobs:
  package-finder:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - name: Find packages
        id: set-packages
        run: |
          echo "::set-output name=packages::$(jq -nc '[ "server" ]')"

  release-please:
    runs-on: ubuntu-latest
    needs: [package-finder]
    strategy:
      fail-fast: false
      matrix:
        package: ${{fromJson(needs.package-finder.outputs.packages)}}
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
      release_json: ${{ steps.release-please.outputs.release_json }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release-please
        with:
          path: packages/${{ matrix.package }}
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: ${{ matrix.package }}
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          monorepo-tags: true
          signoff: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

  build:
    runs-on: ubuntu-latest
    needs: [release-please]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node v18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd packages/server
          yarn install

      - name: Log in to Docker Hub
        if: needs.release-please.outputs.release_created == 'true'
        run: |
          echo "$DH_TOKEN" | docker login -u "$DH_USERNAME" --password-stdin

      - name: Build Docker image
        if: needs.release-please.outputs.release_created == 'true'
        run: |
          cd packages/server
          docker build -f Dockerfile -t $DH_USERNAME/$IMAGE_NAME:dev .

      - name: Add tags to Docker image and push to Docker Hub
        if: needs.release-please.outputs.release_created == 'true'
        run: |
          VERSION=$(jq -r '.tag_name' <<< ${{ needs.release-please.outputs.release_json }})
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          PATCH=$(echo $VERSION | cut -d'.' -f3)
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$VERSION
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR.$PATCH
          docker push $DH_USERNAME/$IMAGE_NAME:v$VERSION
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR.$PATCH

      - name: Add tags to Docker image and push to Docker Hub (specific to main)
        if: github.ref == 'refs/heads/main' && needs.release-please.outputs.release_created == 'true'
        run: |
          VERSION=$(jq -r '.tag_name' <<< ${{ needs.release-please.outputs.release_json }})
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          PATCH=$(echo $VERSION | cut -d'.' -f3)
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR
          docker tag $DH_USERNAME/$IMAGE_NAME:dev $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR.$PATCH
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR
          docker push $DH_USERNAME/$IMAGE_NAME:v$MAJOR.$MINOR.$PATCH
